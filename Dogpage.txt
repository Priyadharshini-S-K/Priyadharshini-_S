import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;

public class DogPage {

    private JFrame frame;
    private JPanel dogPanel;
    private HashMap<String, Integer> breedPrices;
    private HashMap<String, String> breedImages;
    private Color[] lightColors;
    private JTextField searchField;

    public DogPage() {
        initializeFrame();
        initializeBreedData();
        initializeUIComponents();
        frame.setVisible(true);
    }

    private void initializeFrame() {
        frame = new JFrame("Dog Page - Pet Shop Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1000, 1000);
        frame.setLayout(new BorderLayout());
    }

    private void initializeBreedData() {
        breedPrices = new HashMap<>();
        breedPrices.put("Labrador Retriever", 25000);
        breedPrices.put("German Shepherd", 30000);
        breedPrices.put("Golden Retriever", 28000);
        breedPrices.put("Bulldog", 35000);
        breedPrices.put("Beagle", 20000);
        breedPrices.put("Poodle", 32000);
        breedPrices.put("Rottweiler", 27000);
        breedPrices.put("Dachshund", 23000);
        breedPrices.put("Boxer", 26000);
        breedPrices.put("Siberian Husky", 38000);
        breedPrices.put("Chihuahua", 15000);
        breedPrices.put("Shih Tzu", 21000);
        breedPrices.put("Great Dane", 40000);
        breedPrices.put("Doberman Pinscher", 32000);

        breedImages = new HashMap<>();
        breedImages.put("Labrador Retriever", "C:\\Users\\admin\\Pictures\\Saved Pictures\\labra.jpg");
        breedImages.put("German Shepherd", "C:\\Users\\admin\\Pictures\\Saved Pictures\\jerman.jpg");
        breedImages.put("Golden Retriever", "C:\\Users\\admin\\Pictures\\Saved Pictures\\golden.jpg");
        breedImages.put("Bulldog", "C:\\Users\\admin\\Pictures\\Saved Pictures\\bull.jpg");
        breedImages.put("Poodle", "C:\\Users\\admin\\Pictures\\Saved Pictures\\poodle.jpg");
        breedImages.put("Beagle", "C:\\Users\\admin\\Pictures\\Saved Pictures\\beagle.jpg");
        breedImages.put("Rottweiler", "C:\\Users\\admin\\Pictures\\Saved Pictures\\rollweiler.jpg");
        breedImages.put("Boxer", "C:\\Users\\admin\\Pictures\\Saved Pictures\\boxer.jpg");
        breedImages.put("Dachshund", "C:\\Users\\admin\\Pictures\\Saved Pictures\\dachshund.jpg");
        breedImages.put("Siberian Husky", "C:\\Users\\admin\\Pictures\\Saved Pictures\\husky.jpg");
        breedImages.put("Chihuahua", "C:\\Users\\admin\\Pictures\\Saved Pictures\\chintuu.jpg");
        breedImages.put("Shih Tzu", "C:\\Users\\admin\\Pictures\\Saved Pictures\\shintzu.jpg");
        breedImages.put("Great Dane", "C:\\Users\\admin\\Pictures\\Saved Pictures\\greatdane.jpg");
        breedImages.put("Doberman Pinscher", "C:\\Users\\admin\\Pictures\\Saved Pictures\\doberman.jpg");

        lightColors = new Color[]{
                new Color(255, 204, 204), // Light Red
                new Color(255, 255, 204), // Light Yellow
                new Color(204, 255, 204), // Light Green
                new Color(204, 204, 255), // Light Blue
                new Color(255, 204, 255), // Light Magenta
                new Color(204, 255, 255)  // Light Cyan
        };
    }

    private void initializeUIComponents() {
        dogPanel = new JPanel();
        dogPanel.setLayout(new GridLayout(0, 3, 20, 20));
        dogPanel.setBackground(Color.pink);

        initializeDogBreeds();

        JScrollPane scrollPane = new JScrollPane(dogPanel);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBackground(Color.WHITE);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(scrollPane, gbc);

        JPanel searchPanel = new JPanel();
        searchPanel.setBackground(Color.WHITE);
        searchField = new JTextField(20);
        JButton searchButton = new JButton("Search");
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchDogBreeds();
            }
        });

        searchPanel.add(new JLabel("Search: "));
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        frame.add(searchPanel, BorderLayout.NORTH);
        frame.add(mainPanel, BorderLayout.CENTER);
    }

    private void initializeDogBreeds() {
        dogPanel.removeAll();
        int colorIndex = 0;
        for (String breed : breedPrices.keySet()) {
            JPanel breedPanel = createDogBreedPanel(breed, breedImages.get(breed), lightColors[colorIndex % lightColors.length]);
            dogPanel.add(breedPanel);
            colorIndex++;
        }
        dogPanel.revalidate();
        dogPanel.repaint();
    }

    private void searchDogBreeds() {
        String searchQuery = searchField.getText().toLowerCase();
        JFrame searchFrame = new JFrame("Search Results");
        searchFrame.setSize(1000, 1000);
        searchFrame.setLayout(new BorderLayout());
        searchFrame.setBackground(Color.WHITE);

        JPanel searchResultsPanel = new JPanel();
        searchResultsPanel.setLayout(new GridLayout(0, 1, 40, 50));
        int colorIndex = 0;

        for (String breed : breedPrices.keySet()) {
            if (breed.toLowerCase().contains(searchQuery)) {
                JPanel breedPanel = createDogBreedPanel(breed, breedImages.get(breed), lightColors[colorIndex % lightColors.length]);
                searchResultsPanel.add(breedPanel);
                colorIndex++;
            }
        }

        if (colorIndex == 0) {
            JOptionPane.showMessageDialog(searchFrame, "No breeds found.", "Search Results", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        JScrollPane scrollPane = new JScrollPane(searchResultsPanel);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBackground(Color.WHITE);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(scrollPane, gbc);

        searchFrame.add(mainPanel, BorderLayout.CENTER);
        searchFrame.setVisible(true);
    }

    private JPanel createDogBreedPanel(String breed, String imagePath, Color backgroundColor) {
        JPanel breedPanel = new JPanel();
        breedPanel.setLayout(new BoxLayout(breedPanel, BoxLayout.Y_AXIS));
        breedPanel.setBackground(backgroundColor);

        JLabel nameLabel = new JLabel(breed);
        nameLabel.setFont(new Font("Arial", Font.BOLD, 18));
        nameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        nameLabel.setForeground(Color.WHITE);

        ImageIcon imageIcon = loadImage(imagePath);
        JLabel imageLabel = new JLabel();

        if (imageIcon != null) {
            Image image = imageIcon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH);
            imageLabel.setIcon(new ImageIcon(image));
        } else {
            imageLabel.setText("Image not found");
        }
        imageLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel priceLabel = new JLabel("Price: â‚? " + breedPrices.get(breed));
        priceLabel.setFont(new Font("Arial", Font.BOLD, 16));
        priceLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        priceLabel.setForeground(Color.WHITE);

        imageLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                openDogDetailsPage(breed, imagePath);
            }
        });

        breedPanel.add(Box.createVerticalGlue());
        breedPanel.add(nameLabel);
        breedPanel.add(Box.createVerticalStrut(10));
        breedPanel.add(imageLabel);
        breedPanel.add(Box.createVerticalStrut(10));
        breedPanel.add(priceLabel);
        breedPanel.add(Box.createVerticalGlue());

        breedPanel.setBorder(new EmptyBorder(20, 20, 20, 20));

        return breedPanel;
    }

    private ImageIcon loadImage(String imagePath) {
        try {
            return new ImageIcon(imagePath);
        } catch (Exception e) {
            System.err.println("Error loading image: " + imagePath);
            return null;
        }
    }

    private void openDogDetailsPage(String breed, String imagePath) {
        JFrame detailsFrame = new JFrame("Dog Details - " + breed);
        detailsFrame.setSize(700, 700);
        detailsFrame.setLayout(new BorderLayout());
        detailsFrame.getContentPane().setBackground(Color.WHITE);

        JPanel detailsPanel = new JPanel();
        detailsPanel.setLayout(new BoxLayout(detailsPanel, BoxLayout.Y_AXIS));
        detailsPanel.setBackground(Color.WHITE);

        JLabel nameLabel = new JLabel(breed);
        nameLabel.setFont(new Font("Arial", Font.BOLD, 18));
        nameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        ImageIcon imageIcon = loadImage(imagePath);
        JLabel imageLabel = new JLabel();

        if (imageIcon != null) {
            Image image = imageIcon.getImage().getScaledInstance(300, 300, Image.SCALE_SMOOTH);
            imageLabel.setIcon(new ImageIcon(image));
        } else {
            imageLabel.setText("Image not found");
        }
        imageLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel priceLabel = new JLabel("Price: â‚? " + breedPrices.get(breed));
        priceLabel.setFont(new Font("Arial", Font.BOLD, 16));
        priceLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel deliveryLabel = new JLabel("Estimated Delivery: 7-10 days");
        deliveryLabel.setFont(new Font("Arial", Font.BOLD, 14));
        deliveryLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton buyNowButton = new JButton("Buy Now");
        buyNowButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        buyNowButton.setBackground(Color.GREEN);
        buyNowButton.setForeground(Color.WHITE);
        buyNowButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openPurchasePage(breed, breedPrices.get(breed));
            }
        });

        buyNowButton.setFont(new Font("Arial", Font.BOLD, 16));

        detailsPanel.add(Box.createVerticalGlue());
        detailsPanel.add(nameLabel);
        detailsPanel.add(Box.createVerticalStrut(10));
        detailsPanel.add(imageLabel);
        detailsPanel.add(Box.createVerticalStrut(10));
        detailsPanel.add(priceLabel);
        detailsPanel.add(Box.createVerticalStrut(10));
        detailsPanel.add(deliveryLabel);
        detailsPanel.add(Box.createVerticalStrut(10));
        detailsPanel.add(buyNowButton);
        detailsPanel.add(Box.createVerticalGlue());

        detailsFrame.add(detailsPanel, BorderLayout.CENTER);
        detailsFrame.setVisible(true);
    }
    private void openPurchasePage(String breed, int price) {
        JFrame purchaseFrame = new JFrame("Purchase - " + breed);
        purchaseFrame.setSize(400, 300);
        purchaseFrame.setLayout(null); // Use null layout for absolute positioning
        purchaseFrame.getContentPane().setBackground(Color.blue); // Set purchaseFrame background to pink

        Font labelFont = new Font("Arial", Font.BOLD, 16);
        Font fieldFont = new Font("Arial", Font.PLAIN, 14);

        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setFont(labelFont);
        nameLabel.setForeground(Color.black); // Set text color to white
        nameLabel.setBounds(50, 30, 100, 25); // Set position and size

        JTextField nameField = new JTextField(20);
        nameField.setFont(fieldFont);
        nameField.setBackground(Color.LIGHT_GRAY); // Set background color for text field
        nameField.setBounds(150, 30, 200, 25); // Set position and size

        JLabel phoneLabel = new JLabel("Phone No:");
        phoneLabel.setFont(labelFont);
        phoneLabel.setForeground(Color.black); // Set text color to white
        phoneLabel.setBounds(50, 70, 100, 25); // Set position and size

        JTextField phoneField = new JTextField(20);
        phoneField.setFont(fieldFont);
        phoneField.setBackground(Color.LIGHT_GRAY); // Set background color for text field
        phoneField.setBounds(150, 70, 200, 25); // Set position and size

        JLabel addressLabel = new JLabel("Address:");
        addressLabel.setFont(labelFont);
        addressLabel.setForeground(Color.black); // Set text color to white
        addressLabel.setBounds(50, 110, 100, 25); // Set position and size

        JTextArea addressArea = new JTextArea(5, 20);
        addressArea.setFont(fieldFont);
        addressArea.setBackground(Color.LIGHT_GRAY); // Set background color for text area
        addressArea.setLineWrap(true);
        addressArea.setWrapStyleWord(true);
        addressArea.setBounds(150, 110, 200, 25); // Set position and size


        JButton confirmButton = new JButton("Confirm");
        confirmButton.setFont(new Font("Arial", Font.BOLD, 16));
        confirmButton.setBackground(Color.gray);
        confirmButton.setForeground(Color.black);
        confirmButton.setBounds(150, 200, 100, 30); // Set position and size
        confirmButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openConfirmationPage(breed, price, nameField.getText(), phoneField.getText(), addressArea.getText());
                purchaseFrame.dispose(); // Close the purchase frame after confirming
            }
        });

        purchaseFrame.add(nameLabel);
        purchaseFrame.add(nameField);
        purchaseFrame.add(phoneLabel);
        purchaseFrame.add(phoneField);
        purchaseFrame.add(addressLabel);
        purchaseFrame.add(addressArea);
        purchaseFrame.add(confirmButton);

        purchaseFrame.setVisible(true);
    }



    // Method to open confirmation page
    private void openConfirmationPage(String breed, int price, String name, String phone, String address) {
        JFrame confirmationFrame = new JFrame("Confirmation");
        confirmationFrame.setSize(400, 300);
        confirmationFrame.setLayout(new BorderLayout());
        confirmationFrame.getContentPane().setBackground(Color.pink); // Set confirmationFrame background to black

        JPanel confirmationPanel = new JPanel();
        confirmationPanel.setLayout(new BoxLayout(confirmationPanel, BoxLayout.Y_AXIS));
        confirmationPanel.setBackground(Color.pink); // Set confirmationPanel background to black
        confirmationPanel.setBorder(new EmptyBorder(20, 20, 20, 20));

        JLabel confirmationLabel = new JLabel("Thank you for your purchase!");
        confirmationLabel.setFont(new Font("Arial", Font.BOLD, 18));
        confirmationLabel.setForeground(Color.WHITE); // Set text color to white
        confirmationLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel detailsLabel = new JLabel("<html>Breed: " + breed + "<br>Price: â‚? " + price +
                "<br>Name: " + name + "<br>Phone No: " + phone + "<br>Address: " + address + "</html>");
        detailsLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        detailsLabel.setForeground(Color.WHITE); // Set text color to white
        detailsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        confirmationPanel.add(confirmationLabel);
        confirmationPanel.add(Box.createVerticalStrut(20));
        confirmationPanel.add(detailsLabel);

        confirmationFrame.add(confirmationPanel, BorderLayout.CENTER);
        confirmationFrame.setVisible(true);
    }



    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new DogPage());
    }
}
